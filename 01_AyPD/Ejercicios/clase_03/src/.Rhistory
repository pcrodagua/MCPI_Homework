print_colname(df)
print(coltype_)
print_colname <- function(dataf){
colnames_ <- names(dataf)
coltype_  <- class(dataf)
print(coltype_)
for (i in seq_len(colnames_)) {
print(colnames_[i])
print(coltype_[i])
}
}
print_colname(df)
print_colname <- function(dataf){
colnames_ <- names(dataf)
coltype_  <- class(dataf$x)
print(colnames_)
for (i in seq_len(colnames_)) {
print(colnames_[i])
print(coltype_[i])
}
}
print_colname(df)
print_colname <- function(dataf){
colnames_ <- names(dataf)
coltype_  <- sapply(dataf, class)
print(coltype_)
for (i in seq_len(colnames_)) {
print(colnames_[i])
print(coltype_[i])
}
}
print_colname(df)
print_colname <- function(dataf){
colnames_ <- names(dataf)
coltype_  <- sapply(dataf, class)
for (i in 1:ncol(dataf)) {
print(colnames_[i])
print(coltype_[i])
}
}
print_colname(df)
x <- vector()
x
c <- c(1,2,3,4,5,5,5,5,6,7)
cuantas <- function(vect_, num) {
return(len(num %in% vect_))
}
cuantas(c, 5)
c <- c(1,2,3,4,5,5,5,5,6,7)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(c, 5)
c <- c(1,2,3,4,5,5,5,5,6,7)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(c, 2)
# Crear un función 'cuantas  que dado un vector y un entero
# regrese cuantas veces aparece el entero dentro del vector
c <- c(1,2,3,4,5,5,5,5,6,7, 7)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(c, 7)
unique <- function(vect){
new_vect <- c()
for (i in 1:along(vect)) {
if (vect[i] %in% new_vect) {
next()
} else {
new_vect <- c(new_vect, vect[i])
}
}
return(new_vect)
}
unique(vect = c(1,1,2,2,2,3,3,3,3,4,4,4,4,4))
unique <- function(vect){
new_vect <- c()
for (i in 1:length(vect)) {
if (vect[i] %in% new_vect) {
next()
} else {
new_vect <- c(new_vect, vect[i])
}
}
return(new_vect)
}
unique(vect = c(1,1,2,2,2,3,3,3,3,4,4,4,4,4))
source('~/MyProyects/MCPI/MCPI_Homework/01_AyPD/Clase/tarea02.R', echo=TRUE)
source('~/MyProyects/MCPI/MCPI_Homework/01_AyPD/Clase/tarea02.R', echo=TRUE)
cuantas(vect_, 8)
# Crear un función 'cuantas' que dado un vector y un entero
# regrese cuantas veces aparece el entero dentro del vector
vect_ <- c(1,2,3,4,5,5,5,5,6,7, 7,8,8,8,8)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(vect_, 8)
vect_ <- c(1,2,3,4,5,5,5,5,6,7, 7,8,8,8,8)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(vect_, 8)
cuantas(vect_, 0)
cuantas(vect_, 1)
unique(vect = c(1,1,2,2,2,3,3,3,3,4,4,4,4,4))
unique(vect = c(1,1,2,2,2,3,3,3,3,4,4,4,4,4))
unique(vect = c(1,1,2,2,2,3,3,3,3,4,4,4,4,4))
unique(vect = c(1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9))
x_values <- c(seq(1970,2020, by=10))
y_values <- c(11000, 14000, 18000, 23000, 29000, 36000)
data_ <- data.frame(x_values, y_values)
model <- lm(y_values ~ x_values, data = data_)
summary(model)
plot(data_, pch = 16, col = "blue") #Plot the results
abline(model) #Add a regression line
print("Para el 2050 se estima un valor de: ")
print(-975666.67 + (500*2050))
df <- data.frame(x_1, x_2, x_3, x_4, y_v)
# data normalization
x_1 <- c(seq(1970,2020, by=10))
x_2 <- c(60,30,100,20,70,10)
x_3 <- c(40, 140, 300, 90, 100, 30)
x_4 <- c(5,10, 7, 15,2,1)
y_v <- c(11000, 14000, 18000, 23000, 29000, 36000)
df <- data.frame(x_1, x_2, x_3, x_4, y_v)
df_un <- data.frame(x_1, x_2, x_3, x_4, y_v)
xn_1 <- normalize(df_un$x_1, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
xn_2 <- normalize(df_un$x_2, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
xn_3 <- normalize(df_un$x_3, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
xn_4 <- normalize(df_un$x_4, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
yn_v <- normalize(df_un$y_v, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
xn_1 <- x_1 - mean(x_1)) / sd(x_1)
# data normalization
x_1 <- c(seq(1970,2020, by=10))
x_2 <- c(60,30,100,20,70,10)
x_3 <- c(40, 140, 300, 90, 100, 30)
x_4 <- c(5,10, 7, 15,2,1)
y_v <- c(11000, 14000, 18000, 23000, 29000, 36000)
df_un <- data.frame(x_1, x_2, x_3, x_4, y_v)
xn_1 <- x_1 - mean(x_1)) / sd(x_1)
xn_1 <- (x_1 - mean(x_1)) / sd(x_1)
xn_1 <- (x_1 - mean(x_1)) / sd(x_1)
xn_2 <- (x_2 - mean(x_2)) / sd(x_2)
xn_3 <- (x_3 - mean(x_3)) / sd(x_3)
xn_4 <- (x_4 - mean(x_4)) / sd(x_4)
yn_v <- (y_n - mean(y_n)) / sd(y_n)
xn_1 <- (x_1 - mean(x_1)) / sd(x_1)
xn_2 <- (x_2 - mean(x_2)) / sd(x_2)
xn_3 <- (x_3 - mean(x_3)) / sd(x_3)
xn_4 <- (x_4 - mean(x_4)) / sd(x_4)
yn_v <- (y_v - mean(y_v)) / sd(y_v)
df_normalized <- data.frame(xn_1, xn_2, xn_3, xn_4, yn_v)
df_normalized
sd(x_1)
sd(x_2)
xn_1 <- (x_1 - mean(x_1)) / sd(x_1)
xn_2 <- (x_2 - mean(x_2)) / sd(x_2)
xn_3 <- (x_3 - mean(x_3)) / sd(x_3)
xn_4 <- (x_4 - mean(x_4)) / sd(x_4)
yn_v <- (y_v - mean(y_v)) / sd(y_v)
df_normalized <- data.frame(xn_1, xn_2, xn_3, xn_4, yn_v)
df_normalized
# Crear un función 'cuantas' que dado un vector y un entero
# regrese cuantas veces aparece el entero dentro del vector
vect_ <- c(1,2,3,4,5,5,5,5,6,7, 7,8,8,8,8)
vect_ <- c(1,2,3,4,5,5,5,5,6,7, 7,8,8,8,8)
cuantas <- function(vect_, num) {
return(length(which(vect_==num)))
}
cuantas(vect_, 8) # 4
cuantas(vect_, 0) # 0
cuantas(vect_, 1) # 1
setwd("Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/")
data <- read.csv(file = "../data/data_cohb.csv")
data_cohb <- read.csv(file = "../data/data_cohb.csv")
setwd("Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/")
data_cohb <- read.csv(file = "../data/data_cohb.csv")
source('~/Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/main.R', echo=TRUE)
setwd("Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/")
data <- read.csv(file = "../data/data_cohb.csv")
data_cohb <- data.frame(data)
str(data)
setwd("Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/")
data <- read.csv(file = "../data/data_cohb.csv")
data_cohb <- data.frame(data)
str(data_cohb)
source('~/Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/main.R', echo=TRUE)
setwd("Dropbox/MCPI/SEM_01/01_AyPD/Ejercicios/clase_03/src/")
data <- read.csv(file = "../data/data_cohb.csv")
data_cohb <- data.frame(data)
str(data_cohb)
data <- read.csv(file = "../data/data_cohb.csv", stringsAsFactors = FALSE)
data_cohb <- data.frame(data)
str(data_cohb)
View(data)
mean_ <- function(data) {
sum_ = 0.0
for (i in length(data)) {
sum_ = sum + i
}
return sum_/length(data)
}
mean_(data = data_cohb$increase)
mean_ <- function(data) {
sum_ = 0.0
for (i in length(data)) {
sum_ = sum + i
}
return( sum_/length(data))
}
mean_(data = data_cohb$increase)
mean_ <- function(data) {
sum_ = 0.0
for (i in length(data)) {
print(i)
}
return( sum_/length(data))
}
mean_(data = data_cohb$increase)
mean_ <- function(data) {
return(sum(data)/length(data))
}
mean_(data = data_cohb$increase)
str(data_cohb)
st_dev <- function(data, mean){
sum_ <- 0.0
for (i in data){
sum_ <- abs(i - mean)^2
}
return(sqrt(sum_/length(data)))
}
mean_ <- function(data) {
return(sum(data)/length(data))
}
stdev <- function(data, mean){
sum_ <- 0.0
for (i in data){
sum_ <- abs(i - mean)^2
}
return(sqrt(sum_/length(data)))
}
mean_ <- mean_(data = data_cohb$increase)
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean
mean_
stdev <- function(data, mean){
sum_ <- 0.0
for (i in data){
print(i)
sum_ <- abs(i - mean)^2
}
return(sqrt(sum_/length(data)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean_ <- function(data) {
return(sum(data)/length(data))
}
stdev <- function(data, mean){
sum_ <- 0.0
for (i in data){
print(i)
sum_ <- abs(i - mean) * abs(i - mean)
}
return(sqrt(sum_/length(data)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
stdev <- function(data, mean){
sum_ <- 0.0
stdev_ <- 0.0
for (i in data){
print(i)
sum_ <- (i - mean)*(i - mean)
}
return(sqrt(sum_/length(data)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean_ <- function(data) {
return(sum(data)/length(data))
}
variance_ <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- (i - mean)*(i - mean)
}
return(sqrt(sum_/length(data)))
}
stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- function(data) {
return(sum(data)/length(data))
}
variance_ <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- (i - mean)*(i - mean)
}
return(sum_/(length(data)-1))
}
stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean_ <- function(data) {
return(sum(data)/length(data))
}
variance_ <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- sum_ + (i - mean)^2
}
return(sum_/(length(data)-1))
}
stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean_ <- mean_(data = data_cohb$increase)
mean_
variance <- var_(data = data_cohb$increase, mean_)
variance
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
mean_ <- function(data) {
return(sum(data)/length(data))
}
var_ <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- sum_ + (i - mean)^2
}
return(sum_/(length(data)-1))
}
stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
variance <- var_(data = data_cohb$increase, mean_)
variance
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
# 1. mean COHB before
mean_(data = data_cohb$before)
# 2. mean COHB after
mean_(data = data_cohb$after)
mean_ <- function(data) {
return(sum(data)/length(data))
}
var_ <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- sum_ + (i - mean)^2
}
return(sum_/(length(data)-1))
}
stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- mean_(data = data_cohb$increase)
mean_
variance <- var_(data = data_cohb$increase, mean_)
variance
stedev <- stdev(data = data_cohb$increase, mean_)
stedev
# 1. mean COHB before
mean_(data = data_cohb$before)
# 2. mean COHB after
mean_(data = data_cohb$after)
mean_ <- calculate_mean(data = data_cohb$increase)
mean_
var <- calculate_var(data = data_cohb$increase, mean_)
var
stedev <- calculate_stdev(data = data_cohb$increase, mean_)
stedev
calculate_mean <- function(data) {
return(sum(data)/length(data))
}
calculate_var <- function(data, mean) {
sum_ <- 0.0
for (i in data){
sum_ <- sum_ + (i - mean)^2
}
return(sum_/(length(data)-1))
}
calculate_stdev <- function(data, mean){
return(sqrt(variance_(data, mean)))
}
mean_ <- calculate_mean(data = data_cohb$increase)
mean_
var <- calculate_var(data = data_cohb$increase, mean_)
var
stedev <- calculate_stdev(data = data_cohb$increase, mean_)
stedev
# 1. mean COHB before
mean_(data = data_cohb$before)
# 2. mean COHB after
mean_(data = data_cohb$after)
# 1. mean COHB before
calculate_mean(data = data_cohb$before)
# 2. mean COHB after
calculate_mean(data = data_cohb$after)
calculate_mean(data = data_cohb$after) - calculate_mean(data = data_cohb$before)
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (length(data)%%2 == 0) {
return(calculate_mean(c(data[(n+1)/2],data[(n+1)/2])))
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (length(data)%%2 == 0) {
return((data[(n+1)/2] + data[(n)/2])/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (length(data)%%2 == 0) {
return((data[(n+1)/2] + data[n/2])/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (length(data)%%2 == 0) {
return((data[(n+1)/2] + data[n/2])/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (length(data)%%2 == 0) {
return((data[(n+1)/2] + data[n/2])/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if (n%%2 == 0) {
return((data[(n+1)/2] + data[n/2])/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if ((n%%2) == 0) {
med <- data[(n+1)/2] + data[n/2]
return(med/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median(data) {
data <- sort(data)
n <- length(data)
if ((n%%2) == 0) {
print(n+1)
med <- data[(n+1)/2] + data[n/2]
return(med/2)
} else {
return(data[(n+1)/2])
}
}
calculate_median <- function(data) {
data_sort <- sort(data)
n <- length(data_sort)
if ((n%%2) == 0) {
med <- data_sort[(n+1)/2] + data_sort[n/2]
return(med/2)
} else {
return(data_sort[(n+1)/2])
}
}
# 5. mean COHB before
calculate_median(data = data_cohb$before)
# 6. mean COHB after
calculate_median(data = data_cohb$after)
med(data_cohb$after)
median(data_cohb$after)
